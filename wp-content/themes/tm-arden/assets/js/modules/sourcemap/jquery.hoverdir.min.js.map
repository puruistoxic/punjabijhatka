{"version":3,"sources":["jquery.hoverdir.js"],"names":["factory","define","amd","exports","module","require","jQuery","$","Hoverdir","element","options","this","$el","extend","defaults","isVisible","$hoverElem","find","hoverElem","transitionProp","speed","easing","support","_supportsTransitions","_loadEvents","prototype","hoverDelay","inverse","constructor","Modernizr","csstransitions","s","document","body","documentElement","style","p","v","charAt","toUpperCase","substr","i","length","on","proxy","event","direction","_getDir","x","pageX","y","pageY","type","_showHover","_hideHover","styleCSS","_getStyle","css","hide","from","clearTimeout","tmhover","setTimeout","show","_applyAnimation","to","coordinates","w","width","h","height","offset","left","top","Math","round","atan2","PI","fromStyle","toStyle","slideFromTop","slideFromBottom","slideFromLeft","slideFromRight","slideTop","slideLeft","fn","applyStyle","animate","stop","duration","off","rebuild","setOptions","destroy","data","hoverdir","option","parameter","each","Constructor"],"mappings":"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","file":"../../jquery.hoverdir.min.js","sourcesContent":["/**\n * jquery.hoverdir.js v1.1.2\n * http://www.codrops.com\n *\n * Licensed under the MIT license.\n * http://www.opensource.org/licenses/mit-license.php\n *\n * Copyright 2012, Codrops\n * http://www.codrops.com\n */\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n})(function ($) {\n    'use strict';\n\n    function Hoverdir(element, options) {\n        this.$el = $(element);\n        // set options\n        this.options = $.extend(true, {}, this.defaults, options);\n        // initialize visibility to false for show and hide method\n        this.isVisible = false;\n        // get the hover for this element\n        this.$hoverElem = this.$el.find(this.options.hoverElem);\n        // transition properties\n        this.transitionProp = 'all ' + this.options.speed + 'ms ' + this.options.easing;\n        // support for CSS transitions\n        this.support = this._supportsTransitions();\n        // load the events\n        this._loadEvents();\n    }\n\n    Hoverdir.prototype = {\n        defaults: {\n            speed: 300,\n            easing: 'ease',\n            hoverDelay: 0,\n            inverse: false,\n            hoverElem: 'div'\n        },\n        constructor: Hoverdir,\n        /**\n         * Detect if CSS transitions are supported\n         *\n         * @return {Boolean}\n         */\n        _supportsTransitions: function () {\n            if (typeof Modernizr !== 'undefined') {\n                return Modernizr.csstransitions;\n            } else {\n                var b = document.body || document.documentElement,\n                    s = b.style,\n                    p = 'transition';\n\n                if (typeof s[p] === 'string') {\n                    return true;\n                }\n\n                // Tests for vendor specific prop\n                var v = ['Moz', 'webkit', 'Webkit', 'Khtml', 'O', 'ms'];\n                p = p.charAt(0).toUpperCase() + p.substr(1);\n\n                for (var i = 0; i < v.length; i++) {\n                    if (typeof s[v[i] + p] === 'string') {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n        },\n        /**\n         * Bind the events to the element\n         */\n        _loadEvents: function () {\n            this.$el.on('mouseenter.hoverdir mouseleave.hoverdir', $.proxy(function (event) {\n                this.direction = this._getDir({x: event.pageX, y: event.pageY});\n\n                if (event.type === 'mouseenter') {\n                    this._showHover();\n                }\n                else {\n                    this._hideHover();\n                }\n            }, this));\n        },\n        /**\n         * Show the hover of the element\n         */\n        _showHover: function () {\n            var styleCSS = this._getStyle(this.direction);\n\n            if (this.support) {\n                this.$hoverElem.css('transition', '');\n            }\n\n            this.$hoverElem.hide().css(styleCSS.from);\n            clearTimeout(this.tmhover);\n\n            this.tmhover = setTimeout($.proxy(function () {\n                this.$hoverElem.show(0, $.proxy(function () {\n                    if (this.support) {\n                        this.$hoverElem.css('transition', this.transitionProp);\n                    }\n                    this._applyAnimation(styleCSS.to);\n\n                }, this));\n            }, this), this.options.hoverDelay);\n\n            this.isVisible = true;\n        },\n        /**\n         * Hide the hover to the element\n         */\n        _hideHover: function () {\n            var styleCSS = this._getStyle(this.direction);\n            if (this.support) {\n                this.$hoverElem.css('transition', this.transitionProp);\n            }\n            clearTimeout(this.tmhover);\n            this._applyAnimation(styleCSS.from);\n            this.isVisible = false;\n        },\n        /**\n         * get the direction when the event is triggered\n         * credits : http://stackoverflow.com/a/3647634\n         *\n         * @param {Object} coordinates\n         * @returns {Interger}\n         */\n        _getDir: function (coordinates) {\n            // the width and height of the current div\n            var w = this.$el.width(),\n                h = this.$el.height(),\n                // calculate the x and y to get an angle to the center of the div from that x and y.\n                // gets the x value relative to the center of the DIV and \"normalize\" it\n                x = (coordinates.x - this.$el.offset().left - (w / 2)) * (w > h ? (h / w) : 1),\n                y = (coordinates.y - this.$el.offset().top - (h / 2)) * (h > w ? (w / h) : 1),\n                // the angle and the direction from where the mouse came in/went out clockwise (TRBL=0123);\n                // first calculate the angle of the point,\n                // add 180 deg to get rid of the negative values\n                // divide by 90 to get the quadrant\n                // add 3 and do a modulo by 4 to shift the quadrants to a proper clockwise TRBL (top/right/bottom/left) **/\n                direction = Math.round((((Math.atan2(y, x) * (180 / Math.PI)) + 180) / 90) + 3) % 4;\n            return direction;\n        },\n        /**\n         * get the style when the event is triggered\n         *\n         * @param {(Interger|String)} direction\n         * @returns {Object}\n         */\n        _getStyle: function (direction) {\n            var fromStyle, toStyle,\n                slideFromTop = {'left': '0', 'top': '-100%'},\n            slideFromBottom = {'left': '0', 'top': '100%'},\n            slideFromLeft = {'left': '-100%', 'top': '0'},\n            slideFromRight = {'left': '100%', 'top': '0'},\n            slideTop = {'top': '0'},\n            slideLeft = {'left': '0'};\n\n            switch (direction) {\n                case 0:\n                case 'top':\n                    // from top\n                    fromStyle = !this.options.inverse ? slideFromTop : slideFromBottom;\n                    toStyle = slideTop;\n                    break;\n                case 1:\n                case 'right':\n                    // from right\n                    fromStyle = !this.options.inverse ? slideFromRight : slideFromLeft;\n                    toStyle = slideLeft;\n                    break;\n                case 2:\n                case 'bottom':\n                    // from bottom\n                    fromStyle = !this.options.inverse ? slideFromBottom : slideFromTop;\n                    toStyle = slideTop;\n                    break;\n                case 3:\n                case 'left':\n                    // from left\n                    fromStyle = !this.options.inverse ? slideFromLeft : slideFromRight;\n                    toStyle = slideLeft;\n                    break;\n            }\n\n            return {from: fromStyle, to: toStyle};\n        },\n        /**\n         * Apply a transition or fallback to jquery animate based on Modernizr.csstransitions support\n         *\n         * @param {Object} styleCSS\n         */\n        _applyAnimation: function (styleCSS) {\n            $.fn.applyStyle = this.support ? $.fn.css : $.fn.animate;\n            this.$hoverElem.stop().applyStyle(styleCSS, $.extend(true, [], {duration: this.options.speed}));\n        },\n        /**\n         * Show $hoverElem from the direction in argument\n         *\n         * @param {String} [direction=top] direction\n         */\n        show: function (direction) {\n            this.$el.off('mouseenter.hoverdir mouseleave.hoverdir');\n            if (!this.isVisible) {\n                this.direction = direction || 'top';\n                this._showHover();\n            }\n        },\n        /**\n         * Hide $hoverElem from the direction in argument\n         *\n         * @param {String} [direction=bottom] direction\n         */\n        hide: function (direction) {\n            this.rebuild();\n            if (this.isVisible) {\n                this.direction = direction || 'bottom';\n                this._hideHover();\n            }\n        },\n        setOptions: function (options) {\n            this.options = $.extend(true, {}, this.defaults, this.options, options);\n        },\n        /**\n         * Unbinds the plugin.\n         */\n        destroy: function () {\n            this.$el.off('mouseenter.hoverdir mouseleave.hoverdir');\n            this.$el.data('hoverdir', null);\n        },\n        /**\n         * Bind the plugin.\n         */\n        rebuild: function (options) {\n            if (typeof options === 'object') {\n                this.setOptions(options);\n            }\n            this._loadEvents();\n        }\n    };\n\n    $.fn.hoverdir = function (option, parameter) {\n        return this.each(function () {\n            var data = $(this).data('hoverdir');\n            var options = typeof option === 'object' && option;\n\n            // Initialize hoverdir.\n            if (!data) {\n                data = new Hoverdir(this, options);\n                $(this).data('hoverdir', data);\n            }\n\n            // Call hoverdir method.\n            if (typeof option === 'string') {\n                data[option](parameter);\n\n                if (option === 'destroy') {\n                    $(this).data('hoverdir', false);\n                }\n            }\n        });\n    };\n\n    $.fn.hoverdir.Constructor = Hoverdir;\n});\n"]}